/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.18).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.jfernandezrico.chemicals.patents.adapter.in;

import com.jfernandezrico.chemicals.patents.adapter.in.dto.ApiResponseMessage;
import com.jfernandezrico.chemicals.patents.adapter.in.dto.CleanPatentsResponseDto;
import com.jfernandezrico.chemicals.patents.adapter.in.dto.ErrorResponseDto;
import com.jfernandezrico.chemicals.patents.adapter.in.dto.ModelApiResponse;
import com.jfernandezrico.chemicals.patents.adapter.in.dto.UploadPatentResponseDto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;


@Api(value = "patents")
@RequestMapping(value = "")
public interface PatentsApiService {

    @ApiOperation(value = "Removes all the chemicals stored", nickname = "deleteAll", notes = "Removes all the chemicals stored in the data base.", response = ModelApiResponse.class, tags={ "chemicals", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = CleanPatentsResponseDto.class),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorResponseDto.class),
        @ApiResponse(code = 503, message = "Service temporally unavailable", response = ErrorResponseDto.class)})
    @RequestMapping(value = "/patents/clean",
        produces = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CleanPatentsResponseDto> deleteAll();


    @ApiOperation(value = "Uploads chemicals to the system", nickname = "uploadFile", notes = "Uploads chemicals coming from a zip file of xmls, using NLP.", response = ModelApiResponse.class, tags={ "chemicals", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = UploadPatentResponseDto.class),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorResponseDto.class),
        @ApiResponse(code = 503, message = "Service temporally unavailable", response = ErrorResponseDto.class)})
    @RequestMapping(value = "/patents/upload",
        produces = { "application/json" },
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    ResponseEntity<UploadPatentResponseDto> uploadFile(@ApiParam(value = "zip file to upload") @Valid @RequestPart(value="file", required=true) MultipartFile file);

}
